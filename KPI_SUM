from typing import Dict, List
import math
import pandas as pd
from tkinter import filedialog
import numpy as np
import os

selected_columns = ['PS Traffic (GB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR', 'CSFB SR',
                    'ePS CDR',
                    'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)', 'VOLTE Traffic (Erl)', 'VOLTE CSSR',
                    'VOLTE CDR']
selected_columns_percent = ['TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR', 'CSFB SR',
                            'ePS CDR', 'VOLTE Traffic (Erl)', 'VOLTE CSSR', 'VOLTE CDR']
selected_columns_pre_tu = ['PS Traffic (GB)', 'TU PRB DL', 'TU PRB UL', 'ePS CSSR', 'CSFB SR','ePS CDR',
                    'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)', 'VOLTE Traffic (Erl)', 'VOLTE CSSR',
                    'VOLTE CDR']


# Lấy phần total pre daily
def get_total_values_pre_daily(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[0, 2:] = df.loc[
        df['ERBS Id'] == 'TOTAL', ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR', 'CSFB SR',
                                   'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                   'VOLTE Traffic (Erl)', 'VOLTE CSSR', 'VOLTE CDR']]
    df_total['PS Traffic (GB)'] = df_total['PS Traffic (GB)'].astype(float)
    return df_total


# Lấy phần total post daily
def get_total_values_post_daily(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[1, 2:] = df.loc[
        df['Total'] == 'TOTAL', ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR',
                                 'CSFB SR', 'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                 'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']]

    return df_total


def get_total_values_previous_daily(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[3, 2:] = df.loc[
        (df['Date'] == '4/8/2023') & (df['Total'].isnull()), ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)',
                                                              'ePS CSSR', 'CSFB SR',
                                                              'ePS CDR', 'DL User Throughput (Mbps)',
                                                              'UL User Throughput (Mbps)',
                                                              'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']]

    df_total.iloc[4, 2:] = df.loc[
        (df['Date'] == '4/9/2023') & (df['Total'].isnull()), ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)',
                                                              'ePS CSSR', 'CSFB SR',
                                                              'ePS CDR', 'DL User Throughput (Mbps)',
                                                              'UL User Throughput (Mbps)',
                                                              'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']]
    df_total.loc[[0,1,3,4], 'PS Traffic (GB)'] = df_total.loc[[0,1,3,4], 'PS Traffic (GB)'].apply(lambda x: x / 1000)
    return df_total


def get_total_values_previous_peak(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[9, 2:] = df.loc[
        (df['Date'] == '4/8/2023') & (df['Site'].isnull()), ['PS_\nTraffic_GB_', 'TU_DL_PRB', 'TU_UL_PRB', 'e_PS_CSSR',
                                                             'CSFB_\nSR_LTE', 'e_PS_CDR', 'DL_User\n_Throughput_\nMbps',
                                                             'UL_User\n_Throughput_\nMbps',
                                                             'VoLTE_\nTraffic_Erl', 'VoLTE_\nCSSR', 'VoLTE_\nCDR']]

    df_total.iloc[10, 2:] = df.loc[
        (df['Date'] == '4/9/2023') & (df['Site'].isnull()), ['PS_\nTraffic_GB_', 'TU_DL_PRB', 'TU_UL_PRB', 'e_PS_CSSR',
                                                             'CSFB_\nSR_LTE', 'e_PS_CDR', 'DL_User\n_Throughput_\nMbps',
                                                             'UL_User\n_Throughput_\nMbps',
                                                             'VoLTE_\nTraffic_Erl', 'VoLTE_\nCSSR', 'VoLTE_\nCDR']]

    return df_total





# Lấy phần total pre peak
def get_total_values_pre_peak(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[6, 2:] = df.loc[
        df['Date'] == 'TOTAL', ['PS Traffic (GB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR', 'CSFB SR',
                                'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                'VOLTE Traffic (Erl)', 'VOLTE CSSR', 'VOLTE CDR']]

    return df_total


# Lấy phần total post peak
def get_total_values_post_peak(df: pd.DataFrame, df_total: pd.DataFrame) -> pd.DataFrame:
    df_total.iloc[7, 2:] = df.loc[
        df['Site'] == 'TOTAL', ['PS_\nTraffic_GB_', 'TU_DL_PRB', 'TU_UL_PRB', 'e_PS_CSSR',
                                'CSFB_\nSR_LTE', 'e_PS_CDR', 'DL_User\n_Throughput_\nMbps',
                                'UL_User\n_Throughput_\nMbps',
                                'VoLTE_\nTraffic_Erl', 'VoLTE_\nCSSR', 'VoLTE_\nCDR']]

    return df_total


def get_total_values_site(df: pd.DataFrame, df_total: pd.DataFrame,total:str,pos:int, date_range:List) -> pd.DataFrame:
    df_total.iloc[pos, 2:] = df.loc[
        df['Date'] == total, ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR',
                                    'CSFB SR', 'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                    'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']].iloc[0]
    df_total.iloc[pos+1, 2:] = df.loc[
        df['Date'].isin(date_range)][['Date','PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR',  'CSFB SR', 'ePS CDR',
                                      'DL User Throughput (Mbps)','UL User Throughput (Mbps)','VOLTE Traffic (Erl)',
                                     'VOLTE \nCSSR', 'VOLTE CDR']].mean()
    df_total.loc[[pos, pos + 1], 'PS Traffic (GB)'] = df_total.loc[[pos, pos + 1], 'PS Traffic (GB)'].apply(lambda x: x / 1000)
    return df_total


def get_values_2_day_site(df: pd.DataFrame, df_total: pd.DataFrame,pos:int, near_end_date: str, end_date: str) -> pd.DataFrame:
    # Can sua
    df_total.iloc[pos, 2:] = df.loc[
        df['Date'] == near_end_date, ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR',
                                      'CSFB SR', 'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                      'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']]
    df_total.iloc[pos+1, 2:] = df.loc[
        df['Date'] == end_date, ['PS Traffic (MB)', 'TU PRB DL (%)', 'TU PRB UL (%)', 'ePS CSSR',
                                 'CSFB SR', 'ePS CDR', 'DL User Throughput (Mbps)', 'UL User Throughput (Mbps)',
                                 'VOLTE Traffic (Erl)', 'VOLTE \nCSSR', 'VOLTE CDR']]
    df_total.loc[[pos,pos+1], 'PS Traffic (GB)'] = df_total.loc[[pos,pos+1], 'PS Traffic (GB)'].apply(lambda x: x / 1000)
    return df_total


# Lấy phần pre TU range
def get_total_values_range(df: pd.DataFrame, df_total: pd.DataFrame,pos:int,range:str) -> pd.DataFrame:
    df_total.iloc[pos, 2:] = df.loc[
        df['TU range'] == range, selected_columns_pre_tu]

    return df_total


# Lấy phần post TU range
def get_total_values_post_range(df: pd.DataFrame, df_total: pd.DataFrame,pos:int,range:str) -> pd.DataFrame:
    df_total.iloc[pos, 2:] = df.loc[
        df['TU range'] == range, ['PS_\nTraffic_GB_', 'TU_DL_PRB', 'TU_UL_PRB', 'e_PS_CSSR',
                                'CSFB_\nSR_LTE', 'e_PS_CDR', 'DL_User\n_Throughput_\nMbps',
                                'UL_User\n_Throughput_\nMbps',
                                'VoLTE_\nTraffic_Erl', 'VoLTE_\nCSSR', 'VoLTE_\nCDR']]

    return df_total
# Khai báo hàm để lưu file Excel
def save_excel_file(df, file_name):
    # Tạo đối tượng ExcelWriter
    writer = pd.ExcelWriter(file_name, engine='xlsxwriter')

    # Ghi DataFrame vào sheet 'OSS KPI Sum'
    df.to_excel(writer, sheet_name='OSS KPI Sum', index=False)

    # Tạo đối tượng workbook và worksheet để tuỳ chỉnh
    workbook = writer.book
    worksheet = writer.sheets['OSS KPI Sum']

    # Thiết lập định dạng cho các cột
    format1 = workbook.add_format({'num_format': '0.00'})
    worksheet.set_column('C:N', None, format1)

    # Lưu file
    writer.close()


def data_Date(df: pd.DataFrame, post_date_range: str) -> pd.DataFrame:
    # Tạo mảng chứa các giá trị Date
    date_values = np.array([
        'Pre (2/15-21)',
        f'Post ({post_date_range})',
        'Post vs Pre\nBetter(+)/Worse(-)',
        'Previous day',
        'Today',
        'Today vs Previous day\nBetter(+)/Worse(-)'
    ])
    # Lặp lại các giá trị 20 lần
    date_values_repeated = np.tile(date_values, 20)
    # Cập nhật số lượng dòng của DataFrame
    df = df.reindex(range(len(date_values_repeated)), fill_value=np.nan)
    # Thêm cột Date vào df_total
    df.insert(0, 'Date', date_values_repeated, True)
    return df


def date_SiteName(df: pd.DataFrame) -> pd.DataFrame:
    data_value = ["Total (Day)", "Total (Peak)", 4179, 4178, 4177, 4176, 2777, 2855, '0187', 1023, 1037, '0891',
                  "Cell Group (70% ≤ TU < 75%)", "Cell Group (75% ≤ TU < 80%)", "Cell Group (80% ≤ TU < 85%)",
                  "Cell Group (85% ≤ TU < 90%)", "Cell Group (90% ≤ TU < 95%)", "Cell Group (95% ≤ TU < 100%)",
                  "Cell Group (75% ≤ TU < 100%)", "Cell Group (85% ≤ TU < 100%)"]
    # add 5 empty values after each data value
    new_data = []
    for value in data_value:
        new_data.extend([value, '', '', '', '', ''])
    df.insert(0, 'Site name', new_data, True)
    return df


def format_data(df: pd.DataFrame) -> pd.DataFrame:
    # Lấy các hàng 6, 7, 9, 10 và cột 'PS Traffic (GB)'
    df['PS Traffic (GB)'] = df['PS Traffic (GB)'].round(0)
    # Format lại kiểu các giá trị còn lại
    df[['DL User Throughput (Mbps)', 'UL User Throughput (Mbps)', 'VOLTE Traffic (Erl)']] = \
        df[['DL User Throughput (Mbps)', 'UL User Throughput (Mbps)', 'VOLTE Traffic (Erl)']].applymap(
            lambda x: f"{round(float(x), 2):,}" if not isinstance(x, str) and not math.isnan(x) else "")

    # Format giá trị 2 cột DL và UL chỉ hiện 2 số sau dấu phẩy
    df[['TU PRB DL (%)', 'TU PRB UL (%)']] = df[['TU PRB DL (%)', 'TU PRB UL (%)']].applymap(
        lambda x: f"{round(float(x), 2):,}%" if not isinstance(x, str) and not math.isnan(x) else "")

    # Format các giá trị cột về %
    df[['VOLTE CDR', 'ePS CSSR', 'CSFB SR', 'ePS CDR', 'VOLTE CSSR']] = \
        df[['VOLTE CDR', 'ePS CSSR', 'CSFB SR', 'ePS CDR', 'VOLTE CSSR']].applymap(
            lambda x: f"{float(x) * 100:.2f}%" if not isinstance(x, str) and not math.isnan(x) else "")
    return df


def calculator_data(df: pd.DataFrame) -> pd.DataFrame:
    # Tách phần số và phần % bằng dấu %
    for column in selected_columns_percent:
        df[column] = df[column].str.replace('%', '')
    # Đổi kiểu các ô thành float
    for column in selected_columns:
        df[column] = pd.to_numeric(df[column], errors='coerce')

    # Lấy giá trị hàng Better(+)/Worse(-)
    for i in range(2, 24, 3):
        df.loc[i, selected_columns] = df.loc[i - 1, selected_columns] - df.loc[i - 2, selected_columns]

    #Site 4176-2777-2855
    for i in range(32, 48, 3):
        df.loc[i, selected_columns] = df.loc[i - 1, selected_columns] - df.loc[i - 2, selected_columns]
    df.loc[74, selected_columns] = df.loc[73 , selected_columns] - df.loc[72, selected_columns]
    # Thêm dấu phần trăm chỉ ở những ô có giá trị
    df[selected_columns_percent] = df[selected_columns_percent].applymap(
        lambda x: f"{x:.2f}%" if not pd.isna(x) else '')

    return df


import pandas as pd


def get_dates():
    start_date = input('Nhập ngày bắt đầu (vd: 4/3/2023): ')
    end_date = input('Nhập ngày kết thúc (vd: 4/9/2023): ')
    range_date_print = input('Nhập chuoi ngay (vd: 4/03-09): ')
    all_dates = pd.date_range(start_date, end_date).astype(str).tolist()
    # lấy giá trị gần cuối trong all_dates
    near_end_date = pd.to_datetime(all_dates[-2]).strftime('%#m/%#d/%Y')
    formatted_dates = [pd.to_datetime(date).strftime('%#m/%#d/%Y') for date in all_dates]
    # Lấy giá trị ngày bonus
    formatted_end_date = pd.to_datetime(end_date, format='%m/%d/%Y')
    bonus_date = (formatted_end_date + pd.Timedelta(days=1)).strftime('%#m/%#d/%Y')

    return formatted_dates, near_end_date, end_date, bonus_date, range_date_print

def formatted_date(df:pd.DataFrame)->pd.DataFrame:
    df['Date'] = df['Date'].apply(
        lambda x: pd.to_datetime('1899-12-30') + pd.to_timedelta(x, 'D') if isinstance(x, int) else x)
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce').dt.strftime('%#m/%#d/%Y').fillna(
        df['Date'])
    return df



def main() -> None:
    # Mở hộp thoại chọn thư mục chứa các file Excel
    folder_path = filedialog.askdirectory()
    # Lấy khoảng thời gian so sánh
    date_range, near_end_date, end_date, bonus_date,range_date_print = get_dates()

    # # Đọc lấy file "CLUSTER_09_04_New.xlsx"
    df_cluster = pd.ExcelFile(os.path.join(folder_path, "CLUSTER_1304.xlsx"))
    # Lay file TU Range
    #df_tu = pd.ExcelFile(os.path.join(folder_path, "Cell_TU Range_1204.xlsb"))
    try:
        print("Bat dau load file")
        # df_tu_pre = pd.read_excel(os.path.join(folder_path, "Cell_TU Range_1204.xlsb"), sheet_name="Pre_Cell_Range_Sum")
        # df_tu_post_range = pd.read_excel(os.path.join(folder_path, "Cell_TU Range_1204.xlsb"),
        #                                  sheet_name="Post_Cell_Range_Sum")
        # df_tu_post_daily = pd.read_excel(os.path.join(folder_path, "Cell_TU Range_1204.xlsb"),
                #                          sheet_name="Post_Sum_Daily")
    except Exception as e:
        print("Error: ", e)
    # df_tu_pre = df_tu.parse('Pre_Cell_Range_Sum')
    # df_tu_post_range = df_tu.parse('Post_Cell_Range_Sum')
    # df_tu_post_daily = df_tu.parse('Post_Sum_Daily')

    # Đọc sheet từ File Cluster trong file Excel
    df_pre_daily = df_cluster.parse('DTT_Pre_Cluster_Daily')
    df_post_daily = df_cluster.parse('DTT_Post_Cluster_Daily')
    df_pre_peak = df_cluster.parse('DTT_Pre_Cluster_Peak')
    df_post_peak = df_cluster.parse('DTT_Post_Cluster_Peak')
    # # Đọc sheet từ File các Site  trong file Excel
    df_4178_daily = pd.read_excel(os.path.join(folder_path, "eHNI4178_KPI monitoring.xlsb"),
                                  sheet_name='DTT_Pre vs Post_Site_daily')
    df_4179_daily = pd.read_excel(os.path.join(folder_path, "eHNI4179_KPI monitoring.xlsb"),
                                  sheet_name='DTT_Pre vs Post_Site daily')
    df_4176_daily = pd.read_excel(os.path.join(folder_path, "eHNI4176_KPI monitoring.xlsb"),
                                  sheet_name='DTT_Pre vs Post_Site_daily')
    df_2777_daily = pd.read_excel(os.path.join(folder_path, "eHNI2777_KPI monitoring.xlsb"),
                                  sheet_name='DTT_Pre vs Post_Site_daily')
    df_2855_daily = pd.read_excel(os.path.join(folder_path, "eHNI2855_KPI monitoring.xlsb"),
                                  sheet_name='DTT_Pre vs Post_Site_daily')

    # Chuyen ve duoc tu so nguyen ve date va giu nguyen cac gia trị khac nhu null va total
    df_4178_daily = formatted_date(df_4178_daily)
    df_4179_daily = formatted_date(df_4179_daily)
    df_4176_daily = formatted_date(df_4176_daily)
    df_2777_daily = formatted_date(df_2777_daily)
    df_2855_daily = formatted_date(df_2855_daily)
    # TU_Range
    #df_tu_post_daily = formatted_date(df_tu_post_daily)
    # Tao dataframe
    df_total = pd.DataFrame(columns=selected_columns)
    df_total = data_Date(df_total, range_date_print)
    df_total = date_SiteName(df_total)
    # Daily
    df_total = get_total_values_pre_daily(df_pre_daily, df_total)
    df_total = get_total_values_post_daily(df_post_daily, df_total)
    df_total = get_total_values_previous_daily(df_post_daily, df_total)
    #  Peak
    df_total = get_total_values_previous_peak(df_post_peak, df_total)
    df_total = get_total_values_pre_peak(df_pre_peak, df_total)
    df_total = get_total_values_post_peak(df_post_peak, df_total)

    # Site 4179
    df_total = get_total_values_site(df_4179_daily, df_total,'Total',12 ,date_range)
    df_total = get_values_2_day_site(df_4179_daily, df_total,15,near_end_date, end_date)
    # Site 4178
    df_total = get_total_values_site(df_4178_daily, df_total,'Total', 18, date_range)
    df_total = get_values_2_day_site(df_4178_daily, df_total, 21, near_end_date, end_date)
    # Site 4176
    df_total = get_total_values_site(df_4176_daily, df_total,'Total', 30, date_range)
    df_total = get_values_2_day_site(df_4176_daily, df_total, 33, near_end_date, end_date)
    # Site 2777
    df_total = get_total_values_site(df_2777_daily, df_total, 'TOTAL',36, date_range)
    df_total = get_values_2_day_site(df_2777_daily, df_total, 39, near_end_date, end_date)
    # Site 2855
    df_total = get_total_values_site(df_2855_daily, df_total,'TOTAL', 42, date_range)
    df_total = get_values_2_day_site(df_2855_daily, df_total, 45, near_end_date, end_date)


    # Cell range
    range_7075 = '70-75'
    range_7580 = '75-80'
    range_8085 = '80-85'
    # df_total = get_total_values_range(df_tu_pre, df_total,72,range_7075)
    # df_total = get_total_values_post_range(df_tu_post_range, df_total, 73, range_7075)

    # Format data
    df_total = format_data(df_total)
    df_total = calculator_data(df_total)
    print("Luu di")
    # Hiển thị hộp thoại để chọn nơi lưu file Excel
    file_save_path = filedialog.asksaveasfilename(defaultextension='.xlsx')

    # Nếu người dùng đã chọn file để lưu
    if file_save_path:
        # Lưu file Excel
        save_excel_file(df_total, file_save_path)


if __name__ == '__main__':
    main()
